#!/usr/bin/env python

import sys,  re,  commands
from PyQt4 import QtCore, QtGui
from wolui import Ui_WolWindow


class GWol(QtGui.QMainWindow):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        # UI init
        self.ui = Ui_WolWindow()
        self.ui.setupUi(self)
        # Attributes
        self.__wolprg = '/Programs/bin/wol'
        self.__filename = ''
        self.__macaddr = ''
        self.__ipaddr = '255.255.255.255'
        self.__port = '40'
        # The default values on the gui
        self.ui.ip_lineEdit.setText(self.__ipaddr)
        self.ui.port_lineEdit.setText(self.__port)
        # An user input checker
        self.check_input = InputChecker()
        # Signals connection with slots
        QtCore.QObject.connect(self.ui.actionOpen, QtCore.SIGNAL("activated()"), self.fileDialog)
        QtCore.QObject.connect(self.ui.actionAbout,  QtCore.SIGNAL("activated()"),  self.aboutDialog)
        QtCore.QObject.connect(self.ui.send_button,  QtCore.SIGNAL("clicked()"),  self.wakeUp)
    
    def fileDialogOld(self):
        fd = QtGui.QFileDialog(self)
        self.__filename = fd.getOpenFileName()
        from os.path import isfile,  expanduser
        if not isfile(self.__filename):
            return
        statusmessage = "Using %s" % self.__filename
        self.statusBar().showMessage(statusmessage,  30000)
   
    def fileDialog(self):
        from os.path import isfile,  expanduser
        homedir = expanduser('~')
        self.__filename = QtGui.QFileDialog.getOpenFileName(self,  'Read MAC list from file',  homedir)
        if not isfile(self.__filename):
            return
        statusmessage = "Using %s press send button" % self.__filename
        self.statusBar().showMessage(statusmessage,  30000)
   
    def aboutDialog(self):
        text = """A simple GUI for wol.
Written by Nicola Sarobba <nicola.sarobba@gmail.com>

Wol was written by Thomas Krennwallner.
Project web: http://ahh.sourceforge.net/wol/"""
        ad = QtGui.QMessageBox()
        ad.about(self,  'About GWOL',  text)
    
    def errorDialog(self,  msg):
        ed = QtGui.QMessageBox()
        ed.critical(self,  'Error',  msg)

    def  wakeUp(self):
        # Obtain the address list from file
        if self.__filename:
            cmd = "%s -v -f \"%s\"" % (self.__wolprg,  self.__filename)
            self.__filename = ''
        # Obtain the host from input boxes
        else:
            # User input validation
            macaddr = self.ui.mac_lineEdit.text()
            if not self.check_input.isMacAddr(str(macaddr)):
                return
            ipaddr = self.ui.ip_lineEdit.text()
            if not self.check_input.isIpAddr(str(ipaddr)):
                return
            port = self.ui.port_lineEdit.text()
            if not self.check_input.isValidPort(str(port)):
                return
            cmd = "%s -v --host=%s --port=%s %s" % (self.__wolprg,  ipaddr,  port,  macaddr)
        # System command execution
        status,  output = commands.getstatusoutput(cmd)
        if status != 0:
            self.errorDialog(output)
        self.statusBar().showMessage('Sending Magic Packets...',  30000)


class InputChecker(object):
    def __init__(self):
        self.macaddr_pattern = r'^[a-fA-F0-9]{1,2}(:[a-fA-F0-9]{1,2}){5}$'
        self.ipaddr_pattern = r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$'
        self.port_range = (1,  65535)
    
    def isMacAddr(self,  addr):
        if re.match(self.macaddr_pattern,  addr):
            return True
        else:
            return False
    
    def isIpAddr(self,  addr):
        if re.match(self.ipaddr_pattern,  addr):
            return True
        else:
            return False
    
    def isValidPort(self,  port):
        min,  max = self.port_range
        if int(port) in range(min,  max):
            return True
        else:
            return False


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    mainwindow = GWol()
    mainwindow.show()
    sys.exit(app.exec_())
